from typing import Dict, List, Any, Optional
from pydantic import BaseModel, Field
from datetime import datetime

class TradingState(BaseModel):
    """State model for the trading agent system."""
    
    market_data: Dict[str, Any] = Field(
        default_factory=dict,
        description="Raw market data including klines and other metrics"
    )
    
    analysis_results: Dict[str, Any] = Field(
        default_factory=dict,
        description="Results of technical and sentiment analysis"
    )
    
    # Strategy information
    selected_strategy: Optional[str] = Field(
        default=None,
        description="Name of the currently selected trading strategy"
    )
    
    strategy_params: Dict[str, Any] = Field(
        default_factory=dict,
        description="Parameters for the selected strategy"
    )
    
    trading_signals: Dict[str, bool] = Field(
        default_factory=lambda: {"long": False, "short": False},
        description="Trading signals generated by the strategy"
    )
    
    # Risk management
    risk_assessment: Dict[str, Any] = Field(
        default_factory=dict,
        description="Risk assessment metrics and position sizing information"
    )
    
    # Execution data
    execution_status: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Status of order execution"
    )
    
    # History and tracking
    trading_history: List[Dict[str, Any]] = Field(
        default_factory=list,
        description="History of previous trades and their outcomes"
    )
    
    # Agent interaction
    messages: List[Dict[str, Any]] = Field(
        default_factory=list,
        description="Message history for agent interaction"
    )
    
    # Timestamp for tracking
    last_updated: datetime = Field(
        default_factory=datetime.now,
        description="Timestamp of the last state update"
    )
    
    
    class Config:
        arbitrary_types_allowed = True 